using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["liblaszip"], :liblaszip),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/evetion/LASzipBuilder/releases/download/v0.2.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, :glibc) => ("$bin_prefix/LASzipBuilder.v1.0.0.i686-linux-gnu.tar.gz", "e3fdff3fad8ac7da9296727b5eaf5a2c91003e86c77f513d538776dbcd5364aa"),
    Windows(:i686) => ("$bin_prefix/LASzipBuilder.v1.0.0.i686-w64-mingw32.tar.gz", "0ecc9ba50849d732993bd2a713a5fa1d91b50b2904687afe163391cf782a95f3"),
    MacOS(:x86_64) => ("$bin_prefix/LASzipBuilder.v1.0.0.x86_64-apple-darwin14.tar.gz", "3a1f0df325702388fee67194485956d29b51315ca3a9a02320fa2bd7e3950666"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/LASzipBuilder.v1.0.0.x86_64-linux-gnu.tar.gz", "4d3545b66e5914303d9f71cdf11121dd153733d9828a975934333067e1b1bfbe"),
    Windows(:x86_64) => ("$bin_prefix/LASzipBuilder.v1.0.0.x86_64-w64-mingw32.tar.gz", "27af7cfa2776073561b9a8987e1ef4da7f00c6dbc0c7a95db59c14b98f47de83"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
